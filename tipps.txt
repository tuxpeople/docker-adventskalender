Extract a token from a secretQkubectl get secret <my-secret> -n<my-namespace> -ojsonpath='{.data.token}' | base64 -d
Extract the content of a file from a secret (dot in file name must be escaped by \)Qkubectl get secret <my-secret> -ojsonpath='{.data.jmxremote\\.password}' | base64 -d
Copy an object from one namespace to anotherQkubectl get secrets <my-secret> -ojson -n<my-src-namespace> | jq '.metadata.namespace = "<my-dest-namespace>"' | kubectl create -f -
Clean up an helm release manuallyQkubectl get deploy,sts,cm,secret,pvc,svc -oname -lrelease=<my-helm-release> | while read name; do kubectl delete $name; done
Wait for pod to be readyQkubectl wait po <my-po> --for=condition=Ready
Find pods by date with jqQDEPLOYMENT_STARTDATE=`jq -n 'now'`; kubectl get po -lrelease=<my-helm-release> -ojson | jq -r --arg deployment_startdate $DEPLOYMENT_STARTDATE '.items[] | select(.metadata.creationTimestamp | fromdate | tostring > $deployment_startdate) | .metadata.name'
Find pods using a specific environment variable in secretQkubectl get po -ojson | jq -r '.items[] | select(.spec.containers[].env[]?.valueFrom.secretKeyRef.key=="<MY_VAR_ENV_NAME>") | .metadata.name'
Inject an environment variable in a deploymentQkubectl set env deployment/registry STORAGE_DIR=/local
Restart pods properly with a rollout (from 1.15)Qkubectl rollout restart deploy <my-deploy>
Check if I'm allowed to do an actionQkubectl auth can-i exec pod
Suspend all cronjobs at onceQkubectl get cj -oname | while read name; do kubectl patch $name -p '{"spec":{"suspend":true}}'; done
List image in a deploymentQkubectl get deploy -lrelease=si-labo -ojson | jq .items[].spec.template.spec.containers[0].image
List all image references in a namespaceQkubectl get deploy -ojson | jq -r '.. | .image? // empty' | sort -u
List pods in status other than Running or CompletedQkubectl get po -owide --all-namespaces | grep -v 'Running\|Completed'
List pods with anti affinityQkubectl get po -ojson | jq '.items[] | select(.spec.affinity.podAntiAffinity!=null) | .metadata.name'*
List pods with a guaranteed qosQkubectl get po -ojson | jq '.items[] | select(.status.qosClass=="Guaranteed") | .metadata.name'
List prority classes sort by valueQkubectl get pc -ojson | jq -r '.items[] | .metadata.name + " : " + (.value|tostring)' | sort -k3nr
List priority infos for all pods sort by valueQkubectl get po -ojson | jq -r '.items[] | .metadata.namespace + " : " + .spec.nodeName + " : " + .metadata.name + " : " + .spec.priorityClassName+ " : " + (.spec.priority|tostring)' | sort -k9nr -k5
List pods by restart countQkubectl get po --sort-by='.status.containerStatuses[0].restartCount'
List pods by ageQkubectl get po --sort-by=.status.startTime
List OOMKilled podsQkubectl get po --all-namespaces -ojson | jq -r '.items[] | select(.status.containerStatuses[0].lastState.terminated.reason=="OOMKilled") | .metadata.namespace + " " + (.status.containerStatuses[0].restartCount|tostring) + " " + .metadata.name' | sort -k1,1r -k2nr
Delete succeeded jobsQkubectl get jobs -ojson | jq -r '.items[] | select(.metadata.annotations["helm.sh/hook"] and .status.succeeded==1) | .metadata.name' | while read name; do kubectl delete jobs $name ; done
List nodes with memory or disk pressure Taint Based EvictionsQkubectl get no -ojson | jq -r '.items[] | select(.spec.taints!=null and (.spec.taints[0].key|contains("pressure"))) | .metadata.name + " : " + .spec.taints[0].key'
List allocated ressources per nodeQkubectl get no --no-headers | awk '{print $1}' | xargs -I {} sh -c 'echo {}; kubectl describe node {} | grep Allocated -A 5 | grep -ve Event -ve Allocated -ve percent -ve -- ; echo' for i in {01..12}; do echo dbk-k8s-worker-dev-${i}v; kubectl describe node dbk-k8s-worker-dev-${i}v|grep -A6 'Allocated resources:'; done